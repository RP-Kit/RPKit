/*
 * Copyright 2020 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "org.jetbrains.kotlin.jvm" version "1.7.0" apply false
    id "maven-publish"
    id "org.jetbrains.dokka" version "1.7.0" apply false
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: "maven-publish"
    apply plugin: "org.jetbrains.dokka"
    group = "com.rpkit"
    version = "2.3.3"
}

subprojects {
    repositories {
        mavenCentral()
        maven { url "https://hub.spigotmc.org/nexus/content/groups/public/" }
        maven { url "https://repo.dmulloy2.net/repository/public/" }
        maven { url "https://ci.ender.zone/plugin/repository/everything/" }
        maven { url "https://repo.jenkins-ci.org/public/" }
        maven { url "https://maven.enginehub.org/repo/" }
        maven { url "https://repo.codemc.org/repository/maven-public" }
        maven { url "https://jitpack.io" }
        maven { url "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}

def githubToken = ""
def githubPropertiesFile = new File("github.properties")
if (githubPropertiesFile.exists()) {
    def githubProperties = new Properties()
    githubProperties.load(new FileInputStream(githubPropertiesFile))
    githubToken = githubProperties.get("token")
}

githubRelease {
    token githubToken
    owner "RP-Kit"
    repo "RPKit"
    releaseName "Version " + version
    releaseAssets subprojects.stream()
            .flatMap { subproject ->
                subproject.evaluate()
                def noSource = true
                def sourceSets = subproject.sourceSets
                for (sourceSet in sourceSets) {
                    noSource = !sourceSet.allSource.isEmpty() || !noSource
                }
                if (!noSource) {
                    def files = subproject.tasks.jar.outputs.getFiles().getFiles().stream()
                    if (subproject.tasks.findByName("shadowJar")) {
                        files = subproject.tasks.shadowJar.outputs.getFiles().getFiles().stream()
                    }
                    files
                } else {
                    Arrays.stream(new File[0])
                }
            }.toArray { size -> new File[size] }
}

subprojects.forEach { subproject ->
    subproject.evaluate()
    if (subproject.tasks.findByName("shadowJar")) {
        project.tasks.githubRelease.dependsOn subproject.tasks.shadowJar
    } else {
        project.tasks.githubRelease.dependsOn subproject.tasks.jar
    }
}
