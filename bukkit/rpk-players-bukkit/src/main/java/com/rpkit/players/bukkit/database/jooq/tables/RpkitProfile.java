/*
 * This file is generated by jOOQ.
 */
package com.rpkit.players.bukkit.database.jooq.tables;


import com.rpkit.players.bukkit.database.jooq.Keys;
import com.rpkit.players.bukkit.database.jooq.RpkitPlayers;
import com.rpkit.players.bukkit.database.jooq.tables.records.RpkitProfileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitProfile extends TableImpl<RpkitProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rpkit_players.rpkit_profile</code>
     */
    public static final RpkitProfile RPKIT_PROFILE = new RpkitProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitProfileRecord> getRecordType() {
        return RpkitProfileRecord.class;
    }

    /**
     * The column <code>rpkit_players.rpkit_profile.id</code>.
     */
    public final TableField<RpkitProfileRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rpkit_players.rpkit_profile.name</code>.
     */
    public final TableField<RpkitProfileRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rpkit_players.rpkit_profile.discriminator</code>.
     */
    public final TableField<RpkitProfileRecord, Integer> DISCRIMINATOR = createField(DSL.name("discriminator"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_players.rpkit_profile.password_hash</code>.
     */
    public final TableField<RpkitProfileRecord, byte[]> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    /**
     * The column <code>rpkit_players.rpkit_profile.password_salt</code>.
     */
    public final TableField<RpkitProfileRecord, byte[]> PASSWORD_SALT = createField(DSL.name("password_salt"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    private RpkitProfile(Name alias, Table<RpkitProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitProfile(Name alias, Table<RpkitProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_players.rpkit_profile</code> table
     * reference
     */
    public RpkitProfile(String alias) {
        this(DSL.name(alias), RPKIT_PROFILE);
    }

    /**
     * Create an aliased <code>rpkit_players.rpkit_profile</code> table
     * reference
     */
    public RpkitProfile(Name alias) {
        this(alias, RPKIT_PROFILE);
    }

    /**
     * Create a <code>rpkit_players.rpkit_profile</code> table reference
     */
    public RpkitProfile() {
        this(DSL.name("rpkit_profile"), null);
    }

    public <O extends Record> RpkitProfile(Table<O> child, ForeignKey<O, RpkitProfileRecord> key) {
        super(child, key, RPKIT_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RpkitPlayers.RPKIT_PLAYERS;
    }

    @Override
    public Identity<RpkitProfileRecord, Integer> getIdentity() {
        return (Identity<RpkitProfileRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RpkitProfileRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_PROFILE_PRIMARY;
    }

    @Override
    public RpkitProfile as(String alias) {
        return new RpkitProfile(DSL.name(alias), this);
    }

    @Override
    public RpkitProfile as(Name alias) {
        return new RpkitProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitProfile rename(String name) {
        return new RpkitProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitProfile rename(Name name) {
        return new RpkitProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, byte[], byte[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
