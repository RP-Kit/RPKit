/*
 * This file is generated by jOOQ.
 */
package com.rpkit.essentials.bukkit.database.jooq.tables;


import com.rpkit.essentials.bukkit.database.jooq.Keys;
import com.rpkit.essentials.bukkit.database.jooq.RpkitEssentials;
import com.rpkit.essentials.bukkit.database.jooq.tables.records.RpkitPreviousLocationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitPreviousLocation extends TableImpl<RpkitPreviousLocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>rpkit_essentials.rpkit_previous_location</code>
     */
    public static final RpkitPreviousLocation RPKIT_PREVIOUS_LOCATION = new RpkitPreviousLocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitPreviousLocationRecord> getRecordType() {
        return RpkitPreviousLocationRecord.class;
    }

    /**
     * The column
     * <code>rpkit_essentials.rpkit_previous_location.minecraft_profile_id</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Integer> MINECRAFT_PROFILE_ID = createField(DSL.name("minecraft_profile_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.world</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, String> WORLD = createField(DSL.name("world"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.x</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Double> X = createField(DSL.name("x"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.y</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Double> Y = createField(DSL.name("y"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.z</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Double> Z = createField(DSL.name("z"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.yaw</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Double> YAW = createField(DSL.name("yaw"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_essentials.rpkit_previous_location.pitch</code>.
     */
    public final TableField<RpkitPreviousLocationRecord, Double> PITCH = createField(DSL.name("pitch"), SQLDataType.DOUBLE.nullable(false), this, "");

    private RpkitPreviousLocation(Name alias, Table<RpkitPreviousLocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitPreviousLocation(Name alias, Table<RpkitPreviousLocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_essentials.rpkit_previous_location</code>
     * table reference
     */
    public RpkitPreviousLocation(String alias) {
        this(DSL.name(alias), RPKIT_PREVIOUS_LOCATION);
    }

    /**
     * Create an aliased <code>rpkit_essentials.rpkit_previous_location</code>
     * table reference
     */
    public RpkitPreviousLocation(Name alias) {
        this(alias, RPKIT_PREVIOUS_LOCATION);
    }

    /**
     * Create a <code>rpkit_essentials.rpkit_previous_location</code> table
     * reference
     */
    public RpkitPreviousLocation() {
        this(DSL.name("rpkit_previous_location"), null);
    }

    public <O extends Record> RpkitPreviousLocation(Table<O> child, ForeignKey<O, RpkitPreviousLocationRecord> key) {
        super(child, key, RPKIT_PREVIOUS_LOCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RpkitEssentials.RPKIT_ESSENTIALS;
    }

    @Override
    public UniqueKey<RpkitPreviousLocationRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_PREVIOUS_LOCATION_PRIMARY;
    }

    @Override
    public RpkitPreviousLocation as(String alias) {
        return new RpkitPreviousLocation(DSL.name(alias), this);
    }

    @Override
    public RpkitPreviousLocation as(Name alias) {
        return new RpkitPreviousLocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPreviousLocation rename(String name) {
        return new RpkitPreviousLocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPreviousLocation rename(Name name) {
        return new RpkitPreviousLocation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
