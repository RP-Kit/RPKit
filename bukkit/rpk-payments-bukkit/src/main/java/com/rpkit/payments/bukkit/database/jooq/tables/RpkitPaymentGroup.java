/*
 * This file is generated by jOOQ.
 */
package com.rpkit.payments.bukkit.database.jooq.tables;


import com.rpkit.payments.bukkit.database.jooq.Keys;
import com.rpkit.payments.bukkit.database.jooq.RpkitPayments;
import com.rpkit.payments.bukkit.database.jooq.tables.records.RpkitPaymentGroupRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitPaymentGroup extends TableImpl<RpkitPaymentGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rpkit_payments.rpkit_payment_group</code>
     */
    public static final RpkitPaymentGroup RPKIT_PAYMENT_GROUP = new RpkitPaymentGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitPaymentGroupRecord> getRecordType() {
        return RpkitPaymentGroupRecord.class;
    }

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.id</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.name</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.amount</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.currency_name</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, String> CURRENCY_NAME = createField(DSL.name("currency_name"), SQLDataType.VARCHAR(256).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.interval</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, Long> INTERVAL = createField(DSL.name("interval"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.last_payment_time</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, LocalDateTime> LAST_PAYMENT_TIME = createField(DSL.name("last_payment_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rpkit_payments.rpkit_payment_group.balance</code>.
     */
    public final TableField<RpkitPaymentGroupRecord, Integer> BALANCE = createField(DSL.name("balance"), SQLDataType.INTEGER.nullable(false), this, "");

    private RpkitPaymentGroup(Name alias, Table<RpkitPaymentGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitPaymentGroup(Name alias, Table<RpkitPaymentGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_payments.rpkit_payment_group</code> table reference
     */
    public RpkitPaymentGroup(String alias) {
        this(DSL.name(alias), RPKIT_PAYMENT_GROUP);
    }

    /**
     * Create an aliased <code>rpkit_payments.rpkit_payment_group</code> table reference
     */
    public RpkitPaymentGroup(Name alias) {
        this(alias, RPKIT_PAYMENT_GROUP);
    }

    /**
     * Create a <code>rpkit_payments.rpkit_payment_group</code> table reference
     */
    public RpkitPaymentGroup() {
        this(DSL.name("rpkit_payment_group"), null);
    }

    public <O extends Record> RpkitPaymentGroup(Table<O> child, ForeignKey<O, RpkitPaymentGroupRecord> key) {
        super(child, key, RPKIT_PAYMENT_GROUP);
    }

    @Override
    public Schema getSchema() {
        return RpkitPayments.RPKIT_PAYMENTS;
    }

    @Override
    public Identity<RpkitPaymentGroupRecord, Integer> getIdentity() {
        return (Identity<RpkitPaymentGroupRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RpkitPaymentGroupRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_PAYMENT_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<RpkitPaymentGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<RpkitPaymentGroupRecord>>asList(Keys.KEY_RPKIT_PAYMENT_GROUP_PRIMARY);
    }

    @Override
    public RpkitPaymentGroup as(String alias) {
        return new RpkitPaymentGroup(DSL.name(alias), this);
    }

    @Override
    public RpkitPaymentGroup as(Name alias) {
        return new RpkitPaymentGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPaymentGroup rename(String name) {
        return new RpkitPaymentGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPaymentGroup rename(Name name) {
        return new RpkitPaymentGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, String, Long, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
