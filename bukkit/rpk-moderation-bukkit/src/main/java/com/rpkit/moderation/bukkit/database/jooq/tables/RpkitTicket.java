/*
 * This file is generated by jOOQ.
 */
package com.rpkit.moderation.bukkit.database.jooq.tables;


import com.rpkit.moderation.bukkit.database.jooq.Keys;
import com.rpkit.moderation.bukkit.database.jooq.RpkitModeration;
import com.rpkit.moderation.bukkit.database.jooq.tables.records.RpkitTicketRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitTicket extends TableImpl<RpkitTicketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rpkit_moderation.rpkit_ticket</code>
     */
    public static final RpkitTicket RPKIT_TICKET = new RpkitTicket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitTicketRecord> getRecordType() {
        return RpkitTicketRecord.class;
    }

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.id</code>.
     */
    public final TableField<RpkitTicketRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.reason</code>.
     */
    public final TableField<RpkitTicketRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.issuer_id</code>.
     */
    public final TableField<RpkitTicketRecord, Integer> ISSUER_ID = createField(DSL.name("issuer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.resolver_id</code>.
     */
    public final TableField<RpkitTicketRecord, Integer> RESOLVER_ID = createField(DSL.name("resolver_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.world</code>.
     */
    public final TableField<RpkitTicketRecord, String> WORLD = createField(DSL.name("world"), SQLDataType.VARCHAR(256).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.x</code>.
     */
    public final TableField<RpkitTicketRecord, Double> X = createField(DSL.name("x"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.y</code>.
     */
    public final TableField<RpkitTicketRecord, Double> Y = createField(DSL.name("y"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.z</code>.
     */
    public final TableField<RpkitTicketRecord, Double> Z = createField(DSL.name("z"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.yaw</code>.
     */
    public final TableField<RpkitTicketRecord, Double> YAW = createField(DSL.name("yaw"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.pitch</code>.
     */
    public final TableField<RpkitTicketRecord, Double> PITCH = createField(DSL.name("pitch"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.open_date</code>.
     */
    public final TableField<RpkitTicketRecord, LocalDateTime> OPEN_DATE = createField(DSL.name("open_date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.close_date</code>.
     */
    public final TableField<RpkitTicketRecord, LocalDateTime> CLOSE_DATE = createField(DSL.name("close_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rpkit_moderation.rpkit_ticket.closed</code>.
     */
    public final TableField<RpkitTicketRecord, Boolean> CLOSED = createField(DSL.name("closed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private RpkitTicket(Name alias, Table<RpkitTicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitTicket(Name alias, Table<RpkitTicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_moderation.rpkit_ticket</code> table reference
     */
    public RpkitTicket(String alias) {
        this(DSL.name(alias), RPKIT_TICKET);
    }

    /**
     * Create an aliased <code>rpkit_moderation.rpkit_ticket</code> table reference
     */
    public RpkitTicket(Name alias) {
        this(alias, RPKIT_TICKET);
    }

    /**
     * Create a <code>rpkit_moderation.rpkit_ticket</code> table reference
     */
    public RpkitTicket() {
        this(DSL.name("rpkit_ticket"), null);
    }

    public <O extends Record> RpkitTicket(Table<O> child, ForeignKey<O, RpkitTicketRecord> key) {
        super(child, key, RPKIT_TICKET);
    }

    @Override
    public Schema getSchema() {
        return RpkitModeration.RPKIT_MODERATION;
    }

    @Override
    public Identity<RpkitTicketRecord, Integer> getIdentity() {
        return (Identity<RpkitTicketRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RpkitTicketRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_TICKET_PRIMARY;
    }

    @Override
    public List<UniqueKey<RpkitTicketRecord>> getKeys() {
        return Arrays.<UniqueKey<RpkitTicketRecord>>asList(Keys.KEY_RPKIT_TICKET_PRIMARY);
    }

    @Override
    public RpkitTicket as(String alias) {
        return new RpkitTicket(DSL.name(alias), this);
    }

    @Override
    public RpkitTicket as(Name alias) {
        return new RpkitTicket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitTicket rename(String name) {
        return new RpkitTicket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitTicket rename(Name name) {
        return new RpkitTicket(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, Integer, Integer, String, Double, Double, Double, Double, Double, LocalDateTime, LocalDateTime, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
