/*
 * This file is generated by jOOQ.
 */
package com.rpkit.locks.bukkit.database.jooq.tables;


import com.rpkit.locks.bukkit.database.jooq.Keys;
import com.rpkit.locks.bukkit.database.jooq.RpkitLocks;
import com.rpkit.locks.bukkit.database.jooq.tables.records.RpkitKeyringRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitKeyring extends TableImpl<RpkitKeyringRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rpkit_locks.rpkit_keyring</code>
     */
    public static final RpkitKeyring RPKIT_KEYRING = new RpkitKeyring();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitKeyringRecord> getRecordType() {
        return RpkitKeyringRecord.class;
    }

    /**
     * The column <code>rpkit_locks.rpkit_keyring.character_id</code>.
     */
    public final TableField<RpkitKeyringRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_locks.rpkit_keyring.items</code>.
     */
    public final TableField<RpkitKeyringRecord, byte[]> ITEMS = createField(DSL.name("items"), SQLDataType.BLOB.nullable(false), this, "");

    private RpkitKeyring(Name alias, Table<RpkitKeyringRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitKeyring(Name alias, Table<RpkitKeyringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_locks.rpkit_keyring</code> table reference
     */
    public RpkitKeyring(String alias) {
        this(DSL.name(alias), RPKIT_KEYRING);
    }

    /**
     * Create an aliased <code>rpkit_locks.rpkit_keyring</code> table reference
     */
    public RpkitKeyring(Name alias) {
        this(alias, RPKIT_KEYRING);
    }

    /**
     * Create a <code>rpkit_locks.rpkit_keyring</code> table reference
     */
    public RpkitKeyring() {
        this(DSL.name("rpkit_keyring"), null);
    }

    public <O extends Record> RpkitKeyring(Table<O> child, ForeignKey<O, RpkitKeyringRecord> key) {
        super(child, key, RPKIT_KEYRING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RpkitLocks.RPKIT_LOCKS;
    }

    @Override
    public UniqueKey<RpkitKeyringRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_KEYRING_PRIMARY;
    }

    @Override
    public RpkitKeyring as(String alias) {
        return new RpkitKeyring(DSL.name(alias), this);
    }

    @Override
    public RpkitKeyring as(Name alias) {
        return new RpkitKeyring(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitKeyring rename(String name) {
        return new RpkitKeyring(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitKeyring rename(Name name) {
        return new RpkitKeyring(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
