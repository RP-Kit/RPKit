/*
 * This file is generated by jOOQ.
 */
package com.rpkit.locks.bukkit.database.jooq.tables;


import com.rpkit.locks.bukkit.database.jooq.RpkitLocks;
import com.rpkit.locks.bukkit.database.jooq.tables.records.RpkitLockedBlockRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitLockedBlock extends TableImpl<RpkitLockedBlockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rpkit_locks.rpkit_locked_block</code>
     */
    public static final RpkitLockedBlock RPKIT_LOCKED_BLOCK = new RpkitLockedBlock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitLockedBlockRecord> getRecordType() {
        return RpkitLockedBlockRecord.class;
    }

    /**
     * The column <code>rpkit_locks.rpkit_locked_block.world</code>.
     */
    public final TableField<RpkitLockedBlockRecord, String> WORLD = createField(DSL.name("world"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_locks.rpkit_locked_block.x</code>.
     */
    public final TableField<RpkitLockedBlockRecord, Integer> X = createField(DSL.name("x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_locks.rpkit_locked_block.y</code>.
     */
    public final TableField<RpkitLockedBlockRecord, Integer> Y = createField(DSL.name("y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_locks.rpkit_locked_block.z</code>.
     */
    public final TableField<RpkitLockedBlockRecord, Integer> Z = createField(DSL.name("z"), SQLDataType.INTEGER.nullable(false), this, "");

    private RpkitLockedBlock(Name alias, Table<RpkitLockedBlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitLockedBlock(Name alias, Table<RpkitLockedBlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_locks.rpkit_locked_block</code> table
     * reference
     */
    public RpkitLockedBlock(String alias) {
        this(DSL.name(alias), RPKIT_LOCKED_BLOCK);
    }

    /**
     * Create an aliased <code>rpkit_locks.rpkit_locked_block</code> table
     * reference
     */
    public RpkitLockedBlock(Name alias) {
        this(alias, RPKIT_LOCKED_BLOCK);
    }

    /**
     * Create a <code>rpkit_locks.rpkit_locked_block</code> table reference
     */
    public RpkitLockedBlock() {
        this(DSL.name("rpkit_locked_block"), null);
    }

    public <O extends Record> RpkitLockedBlock(Table<O> child, ForeignKey<O, RpkitLockedBlockRecord> key) {
        super(child, key, RPKIT_LOCKED_BLOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RpkitLocks.RPKIT_LOCKS;
    }

    @Override
    public RpkitLockedBlock as(String alias) {
        return new RpkitLockedBlock(DSL.name(alias), this);
    }

    @Override
    public RpkitLockedBlock as(Name alias) {
        return new RpkitLockedBlock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitLockedBlock rename(String name) {
        return new RpkitLockedBlock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitLockedBlock rename(Name name) {
        return new RpkitLockedBlock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
