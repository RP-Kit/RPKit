/*
 * Copyright 2022 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.rpkit.notifications.bukkit.database.jooq.tables;


import com.rpkit.notifications.bukkit.database.jooq.Keys;
import com.rpkit.notifications.bukkit.database.jooq.RpkitNotifications;
import com.rpkit.notifications.bukkit.database.jooq.tables.records.RpkitNotificationRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitNotification extends TableImpl<RpkitNotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>rpkit_notifications.rpkit_notification</code>
     */
    public static final RpkitNotification RPKIT_NOTIFICATION = new RpkitNotification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitNotificationRecord> getRecordType() {
        return RpkitNotificationRecord.class;
    }

    /**
     * The column <code>rpkit_notifications.rpkit_notification.id</code>.
     */
    public final TableField<RpkitNotificationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>rpkit_notifications.rpkit_notification.recipient_id</code>.
     */
    public final TableField<RpkitNotificationRecord, Integer> RECIPIENT_ID = createField(DSL.name("recipient_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_notifications.rpkit_notification.title</code>.
     */
    public final TableField<RpkitNotificationRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(256).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rpkit_notifications.rpkit_notification.content</code>.
     */
    public final TableField<RpkitNotificationRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>rpkit_notifications.rpkit_notification.time</code>.
     */
    public final TableField<RpkitNotificationRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rpkit_notifications.rpkit_notification.read</code>.
     */
    public final TableField<RpkitNotificationRecord, Boolean> READ = createField(DSL.name("read"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private RpkitNotification(Name alias, Table<RpkitNotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitNotification(Name alias, Table<RpkitNotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rpkit_notifications.rpkit_notification</code>
     * table reference
     */
    public RpkitNotification(String alias) {
        this(DSL.name(alias), RPKIT_NOTIFICATION);
    }

    /**
     * Create an aliased <code>rpkit_notifications.rpkit_notification</code>
     * table reference
     */
    public RpkitNotification(Name alias) {
        this(alias, RPKIT_NOTIFICATION);
    }

    /**
     * Create a <code>rpkit_notifications.rpkit_notification</code> table
     * reference
     */
    public RpkitNotification() {
        this(DSL.name("rpkit_notification"), null);
    }

    public <O extends Record> RpkitNotification(Table<O> child, ForeignKey<O, RpkitNotificationRecord> key) {
        super(child, key, RPKIT_NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RpkitNotifications.RPKIT_NOTIFICATIONS;
    }

    @Override
    public Identity<RpkitNotificationRecord, Integer> getIdentity() {
        return (Identity<RpkitNotificationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RpkitNotificationRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_NOTIFICATION_PRIMARY;
    }

    @Override
    public RpkitNotification as(String alias) {
        return new RpkitNotification(DSL.name(alias), this);
    }

    @Override
    public RpkitNotification as(Name alias) {
        return new RpkitNotification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitNotification rename(String name) {
        return new RpkitNotification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitNotification rename(Name name) {
        return new RpkitNotification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, LocalDateTime, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
